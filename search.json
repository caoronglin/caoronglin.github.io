[{"title":"驾考科目一知识点","path":"/p/a746439f.shtml","content":"以下是科目一核心知识点的全面总结，涵盖考试重点模块及细节： 一、准驾车型与年龄要求 准驾车型 年龄要求 其他条件 小型汽车（C1C2） 18周岁以上 无妨碍安全驾驶疾病 轻型牵引挂车（C6） 20周岁以上，70周岁以下 需通过增驾考试 中型客车（B1）、大型货车（B2） 20周岁以上，60周岁以下 无妨碍安全驾驶疾病 牵引车（A2） 24周岁以上，50周岁以下 需持有相应准驾车型驾驶证1年以上 城市公交车（A3） 20周岁以上，60周岁以下 无妨碍安全驾驶疾病 大型客车（A1） 26周岁以上，50周岁以下 需持有B1B2驾驶证1年以上 二、交通标志分类及识别1. 禁令标志（红圈白底，禁止行为） 常见标志：停车让行、减速让行、禁止通行、禁止驶入、会车先行、禁止长时间停车、禁止停车。 易混点： “禁止驶入” vs “禁止通行”：前者仅禁止驶入，后者禁止一切通行。 “禁止长时间停车” vs “禁止停车”：前者允许临时停靠，后者完全禁止停车。 2. 警告标志（黄底黑边三角形，警示危险） 常见标志：注意行人、注意牲畜、注意野生动物、注意落石、注意横风、连续弯路、上坡下坡、窄桥、双向交通。 易混点： “注意行人”（人行横道） vs “注意儿童”（学校区域）。 “左侧变窄” vs “右侧变窄”：箭头指向哪侧即哪侧变窄。 3. 指示标志（蓝底白图案，指示行驶方向） 常见标志：直行、向左向右转弯、靠右侧行驶、单行路、步行街、停车场、残疾人专用停车位。 易混点： “只准直行” vs “单向行驶”：前者禁止转弯，后者仅允许单一方向行驶。 4. 辅助标志 配合主标志使用，如“解除限速50kmh”“此路段最高限速40”。 三、车辆仪表盘与操作1. 仪表盘识别 发动机转速表：指针小为怠速，大为大油门（口诀：“小转大轰”）。 速度和里程表：显示当前车速与累计里程。 水温表：指针过高需检查冷却液。 燃油表：指针接近空需及时加油。 故障灯： ABS灯：刹车防抱死系统故障。 手刹灯：手刹未释放。 机油压力灯：机油不足或压力异常。 制动故障灯：制动系统故障。 2. 点火开关功能 LOCK：切断电源，锁止方向盘。 ACC：接通附件电源（如收音机）。 ON：接通除起动机外的全车电源。 START：接通起动机，启动发动机。 四、交通违法行为扣分规则（新规后） 违法行为 扣分 备注 醉酒驾驶 12分 涉及酒精的所有驾驶情况 肇事逃逸 12分 造成事故后逃逸 驾驶与准驾车型不符 9分 如C1开摩托车 未悬挂号牌 9分 故意遮挡污损号牌加重处罚 高速公路违法停车 9分 饮酒后驾驶 6分 非醉驾 驾驶校车中型以上客车超员20%-50% 6分 驾驶机动车在高速城市快速路违法停车 6分 驾驶未按规定定期安检的机动车 6分 驾驶营运客车（不含公交）校车超员20%-50% 3分 驾驶机动车违反交通信号灯 3分 非闯红灯 驾驶机动车不按规定使用灯光 3分 如滥用远光灯 机动车驾驶人不系安全带 3分 驾驶机动车违反禁令标志禁止标线 3分 如闯单行道 五、学法减分与驾驶证管理1. 学法减分方式 公益活动：1次减免1分，每年最多5次。 现场学习：1次减免2分，每年最多5次。 网上学习：1次减免3分，每年最多5次。 满分学习：一个记分周期内记满12分的，需参加为期7天的道路交通安全法律、法规和相关知识学习。 2. 驾驶证申领与换证 申领条件：C1需年满18周岁，无妨碍安全驾驶疾病。 换证期限：驾驶证有效期届满前90日内申请换证；超龄换证需提交体检证明。 实习期管理：驾驶人在实习期内驾驶机动车上高速公路行驶，应当由持相应或者更高准驾车型驾驶证3年以上的驾驶人陪同。 六、安全文明驾驶技巧1. 路口让行原则 转弯让直行：转弯车辆需让行直行车辆。 右转让左转：右转车辆需让行左转车辆。 灯头让灯尾：先进入路口的车辆需让行后续进入的车辆。 2. 跟车与变道 跟车距离：普通道路保持30米以上，高速保持100米以上。 变道规则：提前开启转向灯，观察后视镜，确认安全后再变道。 3. 夜间行车 灯光使用：近光灯用于会车或照明良好路段，远光灯用于无会车场景。 故障处置：若前照灯突然熄灭，应立即靠边停车，开启危险报警闪光灯。 七、高频考点总结 准驾车型：C6轻型牵引挂车需增驾，年龄20-70岁。 交通标志：区分“禁止驶入”与“禁止通行”，“注意行人”与“注意儿童”。 仪表盘：牢记转速表“小转大轰”，识别常见故障灯。 扣分题：酒驾12分，超员超速看车型（中型以上客车校车超员20%-50%扣6分）。 学法减分：公益活动每年最多5次，每次1分。 驾驶证：实习期上高速需3年以上驾龄陪同。 以上内容覆盖科目一全部核心考点，建议结合题目练习强化记忆。"},{"title":"R2 图床服务：打造你的专属高性能图片托管平台","path":"/p/24faff5b.shtml","content":"R2 图床服务：打造你的专属高性能图片托管平台在数字化时代，图片已成为信息传递的重要载体。无论是个人博客、技术文档还是商业应用，都需要一个稳定、快速、经济的图片托管解决方案。今天，我们要介绍的 R2 图床服务 正是这样一款基于 Cloudflare 全球网络的现代化图床系统，它不仅解决了传统图床的种种痛点，更带来了前所未有的使用体验。 🌟 为什么选择 R2 图床服务？1. 极致性能，全球加速依托 Cloudflare 遍布全球的 300+ 数据中心，你的图片将被智能缓存到离用户最近的节点。无论你身在何处，图片加载都能在毫秒级完成，真正实现”秒开”体验。 2. 成本革命，经济实惠相比传统云存储服务，R2 的存储成本降低 90% 以上。对于个人开发者和小型团队而言，这意味着可以用极低的成本获得企业级的服务品质。 3. 无限扩展，无惧增长从几张图片到百万级图片库，系统都能自动适应。无需担心存储容量、带宽限制或并发访问，真正做到”上传即安心”。 🎨 功能亮点：不止于存储📸 智能图片管理 多格式支持：JPG、PNG、GIF、WebP、SVG 一网打尽 拖拽上传：优雅的交互体验，支持批量上传 实时预览：上传过程中即可预览图片效果 智能分类：按日期自动组织文件夹，管理井井有条 🔗 便捷链接管理 一键复制：CDN 链接、原始链接，一键直达剪贴板 多域名支持：自定义域名 + CDN 加速，灵活配置 永久链接：图片链接永不失效，放心使用 📊 实时数据洞察 统计面板：今日上传、总图片数、存储用量一目了然 趋势分析：了解图片使用模式，优化存储策略 🛠️ 技术架构：现代开发的典范核心技术栈 Cloudflare Workers：无服务器架构，自动扩缩容 R2 存储：兼容 S3 API，迁移零成本 边缘计算：全球部署，就近处理请求 JWT 认证：安全可靠的访问控制 开发体验// 5 行代码完成图片上传const formData = new FormData();formData.append(file, imageFile);const response = await fetch(/api/upload, method: POST, body: formData);const cdnUrl = await response.json();// 你的图片现在已在全球加速！ 🚀 部署指南：从 0 到生产环境步骤 1：准备工作（5 分钟）# 安装工具npm install -g wranglerwrangler login# 克隆项目git clone your-repocd r2-workernpm install 步骤 2：配置环境（3 分钟）创建 wrangler.jsonc，填入你的配置： name: my-image-host, r2_buckets: [ binding: image_host_bucket, bucket_name: my-images ], vars: CUSTOM_DOMAIN: images.yourdomain.com, CDN_DOMAIN: cdn.yourdomain.com 步骤 3：一键部署（1 分钟）npm run deploy# 完成！你的图床已上线 💡 使用场景：无限可能个人博客 Markdown 写作：复制图片链接，直接插入文档 HexoHugo：配合静态博客，实现图片资源分离 Obsidian：作为附件存储，保持笔记整洁 🎯 性能实测数据 场景 传统图床 R2 图床服务 提升 图片加载速度 2-5 秒 200-500ms 10 倍提升 并发处理 100 reqs 10,000+ reqs 100 倍提升 存储成本 $0.023GB月 $0.015GB月 35% 节省 全球覆盖 单区域 300+ 节点 全球加速 🔒 安全与隐私 端到端加密：传输过程全程 HTTPS 访问控制：基于 JWT 的细粒度权限管理 数据隔离：每个用户独立命名空间 备份机制：多重备份，数据永不丢失 🌈 开源社区R2 图床服务完全开源，拥抱社区力量： GitHub 仓库：欢迎 Star、Fork、贡献代码 问题反馈：活跃的 Issue 响应 功能建议：社区驱动的功能迭代 中文文档：完善的本土化支持 📱 多端适配无论是桌面端还是移动端，都能获得完美的使用体验： 响应式设计：自适应各种屏幕尺寸 🎪 立即开始准备好体验下一代图床服务了吗？ 在线演示：访问 [Cpicgo - 现代图床](Cpicgo - 现代图床) GitHub 仓库：搜索 “cpicgo” 获取完整源码 部署文档：5 分钟完成从零到生产的部署 R2 图床服务不仅是一个工具，更是你对高效工作流程的投资。加入我们，一起构建更好的图片托管未来！","tags":["serverlsee"],"categories":["建站"]},{"title":"免费域名","path":"/p/5061079.shtml","content":"域名域名是一个网站在互联网上的身份证,是尤其重要的,生活中我们常见的域名由`.cn | .com | .top |`等,这些域名我们称之为`顶级域名`,是很贵的(土豪除外),今天我们将介绍一款`免费的二级域名`,而且可以自己设置`DNS服务商` 介绍EU.ORG是欧盟组织下面的域名，EU代表欧盟 EU.org是由Paul Mockapetris在1996 年 9 月10 日创建的域名，目前个人和组织都是可以免费注册的 维护时间长,稳定 注意在这个域名的审核时间很长,而且国内必须`https`才能访问 步骤第一步第一步肯定要注册账号(这不用想都知道)@传送门 进入到网站,你会看到这样的一个页面 其中只有`Password`和`E-mail`是需要我们认真对待的,其他内容胡乱填写就行,其他信息会显示在`WHOIS`查询上 第二步登录我们的小邮箱,会有以下信息 接下来我们需要如下操作 点击`链接`激活账户 复制`nic-hdl`一会登录要用 登录@传送门 `Handle`就是刚才复制的内容,`密码`是自己设置的 第三步登录都好了,肯定是注册域名啊难不成就看着简陋的页面@传送门 如果是这样的页面就中了,其中`域名`要加`eu.org`且不能太短 第四步这是最最最最最重要的一步`添加NS服务器`,据目前常用DNS提供商,有如下几个提供`二级域名`服务 dnspod(国内用户推荐) cloudflare(赛博菩萨) 只有这些了(其实是博主只测了这些) 添加域名解析这些应该不用介绍了吧,如果你操作顺利,那么应该是这样的 接下来回到域名注册页面,然如下设置(其他DNS提供商一样) 接下来,点击按钮提交即可,等待出现`done`就完成了 如果看完还有不懂得,欢迎`评论区`留言哦~","tags":["建站"],"categories":["免费"]},{"title":"任务二","path":"/p/34fab8c5.shtml","content":"使用STAR（https://github.com/alexdobin/STAR?tab=readme-ov-file）将RNA-seq的reads比对到参考基因组上，比对对象是已经经过过滤后的文件 一、准备（1）安装软件1）二进制安装STAR_2.7.11b.zip 环境变量处理2）conda 安装 conda create -n myenvconda activate myenvconda install -c bioconda star 过程（1）生成索引文件（耗时巨大）STAR \\--runThreadN 12 \\--genomeDir /data1/caoronglin/data/human \\--readFilesIn /data1/caoronglin/data/human/data/GM12878/results/trimmed/ENCFF481BWJ_trimmed.fq.gz \\--outFileNamePrefix /data1/caoronglin/data/human/output/ENCFF481BWJ_ \\--outSAMtype BAM SortedByCoordinate \\--outFilterType BySJout \\--outFilterMultimapNmax 20 \\--alignSJoverhangMin 8 \\--alignSJDBoverhangMin 1 \\--outSAMattrRGline ID:GM12878 SM:GM12878 LB:library1 PU:unit1 PL:ILLUMINA \\--outSAMmapqUnique 60 \\--limitBAMsortRAM 20000000000 \\--readFilesCommand zcat \\--outReadsUnmapped Fastx \\ --quantMode GeneCounts \\ --sjdbOverhang 99 （2）开始比对 STAR \\ --runThreadN 12 \\ --genomeDir /data1/caoronglin/data/human \\ --readFilesIn /data1/caoronglin/data/human/data/GM12878/results/trimmed/ENCFF974EKR_trimmed.fq.gz \\ --outFileNamePrefix /data1/caoronglin/data/human/output/ENCFF974EKR_ \\ --outSAMtype BAM SortedByCoordinate \\ --outFilterType BySJout \\ --outFilterMultimapNmax 20 \\ --alignSJoverhangMin 8 \\ --alignSJDBoverhangMin 1 \\ --outSAMattrRGline ID:GM12878 SM:GM12878 LB:library1 PU:unit1 PL:ILLUMINA \\ --outSAMmapqUnique 60 \\ --limitBAMsortRAM 20000000000 \\ --readFilesCommand zcat \\ --outReadsUnmapped Fastx \\ --quantMode GeneCounts \\ --sjdbOverhang 99 \\ （3） 比对结果ENCFF974EKR_Log.final.out.txt ENCFF824LLV_Log.final.out.txt","tags":["生信"],"categories":["启航计划"]},{"title":"任务一","path":"/p/f7a966c.shtml","content":"任务1:从Ensembl数据库下载最新的人类参考基因组序列（fasta格式）以及对应的注释文件（GFF格式） 任务2:下载人类GM2878的转录组测序数据（GEO:GSE88583） https://www.encodeproject.org/experiments/ENCSR843RJV/ 并进行质量检测（FastQC）和过滤（TrimGalore） 一、准备（1） 所需软件 📎MobaXterm_Installer_v25.2.zip连接服务器使用 fastqc进行质量分析 trim_galore进行过滤 （2）所需资源 1）人类基因组 Homo_sapiens.GRCh38.114.gtf（gtf 解释文件） Homo_sapiens.GRCh38.dna.primary_assembly.fa（人类基因组） 2）GM12828 基因 ENCLB518OAU ENCLB919DEB （2）安装 miniconda1）安装#安装minicondawget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh#配置环境变量echo export PATH=～/miniconda3/bin: $ PATH ～/.bashrcsource ～/.bashrc#验证安装conda --version#创建虚拟环境conda create -n myenvconda activate myenv #激活环境，配置软件包 2）换源echo channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirror.lzu.edu.cn/anaconda/pkgs/main - https://mirror.lzu.edu.cn/anaconda/pkgs/r - https://mirror.lzu.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirror.lzu.edu.cn/anaconda/cloud pytorch: https://mirror.lzu.edu.cn/anaconda/cloud | tee ~/.condarcconda config --set custom_channels.bioconda https://mirror.lzu.edu.cn/anaconda/cloud/#bioconda是常用源，非常重要，大部分软件需要从这里下载 3）利用 conda 安装软件conda create -n myenv python=3.6#创建环境，一定要指定python版本conda activate myenv #激活环境conda install -c bioconda fastqc trim-galore snakemake 二、 编写 snakemake使用 snakemake 工作流，可以简便工作流程，此处不过多解释 Snakemake 的编写规则 （1） 创建 Snakefile 文件（utf-8 编码）# 定义输入输出路径SAMPLES = [ENCFF824LLV, ENCFF974EKR]INPUT_DIR = dataFASTQC_OUTPUT_DIR = results/fastqcTRIMMED_OUTPUT_DIR = results/trimmedconfigfile: config/config.yamlrule all: input: expand(fFASTQC_OUTPUT_DIR/sample_fastqc.html, sample=SAMPLES), expand(fTRIMMED_OUTPUT_DIR/sample_trimmed.fq.gz, sample=SAMPLES), expand(fTRIMMED_OUTPUT_DIR/sample_trimming_report.txt, sample=SAMPLES)rule fastqc_original: input: fINPUT_DIR/sample.fastq.gz output: html=fFASTQC_OUTPUT_DIR/sample_fastqc.html, zip=fFASTQC_OUTPUT_DIR/sample_fastqc.zip shell: mkdir -p FASTQC_OUTPUT_DIR fastqc --outdir FASTQC_OUTPUT_DIR input rule trim_galore: input: fINPUT_DIR/sample.fastq.gz output: trimmed=fTRIMMED_OUTPUT_DIR/sample_trimmed.fq.gz, report=fTRIMMED_OUTPUT_DIR/sample_trimming_report.txt params: adapter=CTGTCTCTTATACACATCT # 根据日志自动检测到的Nextera接头 threads: 4 shell: mkdir -p TRIMMED_OUTPUT_DIR trim_galore \\ --gzip \\ --adapter params.adapter \\ --length 20 \\ --output_dir TRIMMED_OUTPUT_DIR \\ --cores threads \\ input Snakefile 一定要按照格式书写 （2）配置文件trim_galore: cores: 8 # 根据硬件调整核心数name: rnaseq-pipelinechannels: - bioconda - conda-forge - defaultsdependencies: - python=3.10 - fastqc=0.12.1 - trim-galore=0.6.9 - snakemake=8.16.0","tags":["生信"],"categories":["启航计划"]},{"title":"利用Hexo框架搭建静态博客","path":"/p/697f76e7.shtml","content":"前言有很多开源的动态博客框架，我们为什么要用静态博客框架呢？让我们先看看什么是Hexo Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 众所周知，白嫖让我们快乐，利用Hexo搭建的博客可以解锁更多的白嫖技巧（后续文章更新） 初始化博客安装node.jswindows安装 前往node.js官网下载（推荐下载LTS版本） 按照安装提示进行安装（一定要选“添加到环境变量ADD TO PATH”，这样会给后期减少很多麻烦） 安装Git Linux安装安装源里面的node版本（简便方法） debianununtu(需要管理员权限) apt install nodejsapt install npmapt-get install git-corenpm config set registry http://registry.npm.taobao.org/（这一步将NPM源切换为国内淘宝源，可以不做） centos yum install nodejsyun install npmyum install git-corenpm config set registry http://registry.npm.taobao.org/ 利用宝塔面板安装 安装node管理器 选择任意一个版本（建议选一个长期支持版本，宝塔面板安装不好处理），可以使用span class=ne-textnpx hexo使用/span这样的安装方式需要自己添加环境变量 增加环境变量（需要管理员权限—Linux）echo PATH=$PATH:./node_modules/.bin ~/.profile docker安装期待后续更新 安装hexo（推荐使用淘宝源）npm install -g hexo-cli 这样，前期环境搭建就完成了 初始化博客根目录//选定一个你要存放博客的目录，在你选定的目录打开终端（windows用户请复制相对路径，在cmd里cd+进入目录）hexo init 博客目录名 //hexo init myblogcd 博客目录名 //cd myblognpm install / cnpm installhexo s //（在线预览博客，需要放行4000端口）or hexo s -p+端口号 好了，就这样一个静态博客就初始化好了（可以通过http://localhost:4000/127.0.0.1:4000访问） 这是成功后的目录结构，期中_config.yml是前期用的比较多的 对于动态博客看起来会比较麻烦，但后期的备份，白嫖。迁移都有很大的优势。 选择主题爱美之心人皆有之，谁不会想要一个好看的博客主题呢？本文推荐使用博主同款主题butterfly 什么是主题butterfly 获取主题（以下均在刚刚创建的博客根目录进行（myblog））通过git获取（需要提前配置好git）git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 对于没有梯子的，可以采用本站提供的镜像github（任选一个使用） git clone -b master https://git.ypmsk.tk/jerryc127/hexo-theme-butterfly.git themes/butterflygit clone -b master https://git.ypmsk.top/jerryc127/hexo-theme-butterfly.git themes/butterfly 通过npm获取npm i hexo-theme-butterfly 需要手动将node_modules下的hexo-theme-butterfly复制到themes目录下 修改博客主配置,让主题生效# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: butterfly 为博客添加身份（修改基础信息）# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Sitetitle: starsblog //博客题目subtitle: 博客副标题description: keywords: 分享，技术，教程 //自己博客的关键字author: 作者language: zh-CNtimezone: //时区，默认不管它就行# URL## Set your site url here. For example, if you use GitHub Page, set url as https://username.github.io/projecturl: https://www.cnortles.top //博客地址（和版权信息，以及分享有关）permalink: posts/:abbrlink/ //（此处配置为安装了插件）abbrlink: alg: crc32 rep: hexpermalink_defaults:pretty_urls: trailing_index: true # Set to false to remove trailing index.html from permalinks trailing_html: true # Set to false to remove trailing .html from permalinks 基础信息配置完以后，让我们一键三连 hexo clean // npx hexo cleanhexo g // npx hexo ghexo s //npx hexo s 通过localhost:4000预览博客（关于端口修改上文已提及） 主题更新方法为了方便主题更新，请将主题目录下的_config.yml（原文件不要删除！！！）复制到博客根目录下并改为_config.butterfly.yml 在hexo5.0以上，会自动合并两个配置，默认读取“_config.butterfly.yml”后续关于主题的魔改也会在这里修改 番外番外1：利用语雀写文章本站已有小白版教程（非自动版） 结尾 介绍安装Nodejs 安装hexo docker安装 选择主题 一键三连 简化后续主题更新 如何写作 主题魔改 白嫖进行时 安装插件 番外1：利用语雀写文章（非自动版） 番外2：利用qexo写文章","tags":["hexo"],"categories":["建站"]},{"path":"/go.html","content":"😃页面加载中，请稍候...body{overflow:hidden;height:100vh;width:100vw;margin:0;padding:0}.container{display:flex;align-items:center;justify-content:center;height:100%;width:100%;margin:0;flex-direction:column}.avatar-placeholder,.avatar{width:100px;height:100px;border-radius:50%;margin-bottom:15px;display:block}.avatar{display:none}.description{font-size:20px;font-weight:600}.subtitle{font-size:15px;margin-bottom:20px;color:#C4C4C4}.loading{text-align:center;padding:30px;border-radius:25px;animation:fadein 2s;width:450px;max-width:80%;transition:all 0.3s ease-in-out}@keyframes fadein{from{opacity:0}to{opacity:1}}.content{margin-bottom:20px}.url-text{margin-bottom:10px;font-size:16px;letter-spacing:1px}.jump-url{position:relative;font-size:20px;display:block;margin-top:5px;margin-bottom:25px;padding:15px;border-radius:18px;height:25px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.copy-btn-container{position:absolute;display:flex;align-items:center;right:10px;top:50%;transform:translateY(-50%);height:100%;width:63px;flex-direction:row-reverse}.copy-btn{width:40px;height:40px;border-radius:12px;border:1px solid#a4a4a4;transition:all 0.3s ease-in-out}.copy-btn-container svg{width:25px;height:25px;fill:#888}.countdown-text{margin-top:12px;font-size:12px}.button-container{display:flex;justify-content:center;gap:20%;margin-top:20px}.button{padding:10px 20px;border-radius:16px;border:none;cursor:pointer;font-size:16px;width:120px;height:40px}.cancel-button{color:black}.confirm-button{color:white}.progress-bar{width:100%;border-radius:5px;overflow:hidden;height:10px;margin-top:20px}.progress{width:100%;height:100%;transition:width 1s}const host=window.location.host;function GetQueryString(name){var reg=new RegExp(\"(^|var r=window.location.search.substr(1).match(reg);return r?decodeURI(r[2]):null}function decodeSafeUrlParam(paramStr){const base64=paramStr.replace(/-/g,'+').replace(/_/g,'/');const decoded=decodeURIComponent(atob(base64).split('').map(c=>'%'+('00'+c.charCodeAt(0).toString(16)).slice(-2)).join(''));return decoded}let countdown=;let jump_url=GetQueryString('');const UrlReg='^((http|https|thunder|qqdl|ed2k|Flashget|qbrowser|ftp|rtsp|mms)://)';if(!jump_url||!jump_url.match(UrlReg)){document.title='参数错误，正在返回首页...';jump_url=location.origin}let progressElement;let countdownElement;let countdownTextElement;let jumpUrlElement;function updateCountdown(){if(countdown"},{"title":"关于","path":"/about/index.html","content":"生物学 INTP 开源 Python 生信 Caoronglin 道阻且长，行则将至 文章数 标签数 分类数 关于我 你好👋，我是曹荣麟，一个热爱开源的生物学本科生。 目前专注于生物信息学的学习。 喜欢编程，对开源充满热情，希望能为开源社区贡献自己的一份力量。 技能标签 Python - 精通 生物信息学 - 专注 机器学习 - 熟练 数据分析 - 熟练 生物学 - 专业 找到我 GitHub Email 2025 开始系统学习生物信息学 2024 进入西北农林科技大学，开始接触生物信息学"},{"title":"说说","path":"/bb/index.html","content":"showQexoTalks(\"qexot\", \"https://qexo.cnortles.top\", 5)"},{"title":"我的朋友圈","path":"/friends/index.html","content":""},{"title":"FriendCircle","path":"/friends/rss/index.html","content":""},{"title":"任务一","path":"/notes/bio/bio1.html","content":"任务1:从Ensembl数据库下载最新的人类参考基因组序列（fasta格式）以及对应的注释文件（GFF格式） 任务2:下载人类GM2878的转录组测序数据（GEO:GSE88583） https://www.encodeproject.org/experiments/ENCSR843RJV/ 并进行质量检测（FastQC）和过滤（TrimGalore） 一、准备（1） 所需软件 📎MobaXterm_Installer_v25.2.zip连接服务器使用 fastqc进行质量分析 trim_galore进行过滤 （2）所需资源 1）人类基因组 Homo_sapiens.GRCh38.114.gtf（gtf 解释文件） Homo_sapiens.GRCh38.dna.primary_assembly.fa（人类基因组） 2）GM12828 基因 ENCLB518OAU ENCLB919DEB （2）安装 miniconda1）安装#安装minicondawget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.shbash Miniconda3-latest-Linux-x86_64.sh#配置环境变量echo export PATH=～/miniconda3/bin: $ PATH ～/.bashrcsource ～/.bashrc#验证安装conda --version#创建虚拟环境conda create -n myenvconda activate myenv #激活环境，配置软件包 2）换源echo channels: - defaultsshow_channel_urls: truedefault_channels: - https://mirror.lzu.edu.cn/anaconda/pkgs/main - https://mirror.lzu.edu.cn/anaconda/pkgs/r - https://mirror.lzu.edu.cn/anaconda/pkgs/msys2custom_channels: conda-forge: https://mirror.lzu.edu.cn/anaconda/cloud pytorch: https://mirror.lzu.edu.cn/anaconda/cloud | tee ~/.condarcconda config --set custom_channels.bioconda https://mirror.lzu.edu.cn/anaconda/cloud/#bioconda是常用源，非常重要，大部分软件需要从这里下载 3）利用 conda 安装软件conda create -n myenv python=3.6#创建环境，一定要指定python版本conda activate myenv #激活环境conda install -c bioconda fastqc trim-galore snakemake 二、 编写 snakemake使用 snakemake 工作流，可以简便工作流程，此处不过多解释 Snakemake 的编写规则 （1） 创建 Snakefile 文件（utf-8 编码）# 定义输入输出路径SAMPLES = [ENCFF824LLV, ENCFF974EKR]INPUT_DIR = dataFASTQC_OUTPUT_DIR = results/fastqcTRIMMED_OUTPUT_DIR = results/trimmedconfigfile: config/config.yamlrule all: input: expand(fFASTQC_OUTPUT_DIR/sample_fastqc.html, sample=SAMPLES), expand(fTRIMMED_OUTPUT_DIR/sample_trimmed.fq.gz, sample=SAMPLES), expand(fTRIMMED_OUTPUT_DIR/sample_trimming_report.txt, sample=SAMPLES)rule fastqc_original: input: fINPUT_DIR/sample.fastq.gz output: html=fFASTQC_OUTPUT_DIR/sample_fastqc.html, zip=fFASTQC_OUTPUT_DIR/sample_fastqc.zip shell: mkdir -p FASTQC_OUTPUT_DIR fastqc --outdir FASTQC_OUTPUT_DIR input rule trim_galore: input: fINPUT_DIR/sample.fastq.gz output: trimmed=fTRIMMED_OUTPUT_DIR/sample_trimmed.fq.gz, report=fTRIMMED_OUTPUT_DIR/sample_trimming_report.txt params: adapter=CTGTCTCTTATACACATCT # 根据日志自动检测到的Nextera接头 threads: 4 shell: mkdir -p TRIMMED_OUTPUT_DIR trim_galore \\ --gzip \\ --adapter params.adapter \\ --length 20 \\ --output_dir TRIMMED_OUTPUT_DIR \\ --cores threads \\ input Snakefile 一定要按照格式书写 （2）配置文件trim_galore: cores: 8 # 根据硬件调整核心数name: rnaseq-pipelinechannels: - bioconda - conda-forge - defaultsdependencies: - python=3.10 - fastqc=0.12.1 - trim-galore=0.6.9 - snakemake=8.16.0","tags":[null],"categories":[null]},{"title":"任务二","path":"/notes/bio/bio2.html","content":"使用STAR（https://github.com/alexdobin/STAR?tab=readme-ov-file）将RNA-seq的reads比对到参考基因组上，比对对象是已经经过过滤后的文件 一、准备（1）安装软件1）二进制安装STAR_2.7.11b.zip 环境变量处理2）conda 安装 conda create -n myenvconda activate myenvconda install -c bioconda star 过程（1）生成索引文件（耗时巨大）STAR \\--runThreadN 12 \\--genomeDir /data1/caoronglin/data/human \\--readFilesIn /data1/caoronglin/data/human/data/GM12878/results/trimmed/ENCFF481BWJ_trimmed.fq.gz \\--outFileNamePrefix /data1/caoronglin/data/human/output/ENCFF481BWJ_ \\--outSAMtype BAM SortedByCoordinate \\--outFilterType BySJout \\--outFilterMultimapNmax 20 \\--alignSJoverhangMin 8 \\--alignSJDBoverhangMin 1 \\--outSAMattrRGline ID:GM12878 SM:GM12878 LB:library1 PU:unit1 PL:ILLUMINA \\--outSAMmapqUnique 60 \\--limitBAMsortRAM 20000000000 \\--readFilesCommand zcat \\--outReadsUnmapped Fastx \\ --quantMode GeneCounts \\ --sjdbOverhang 99 （2）开始比对 STAR \\ --runThreadN 12 \\ --genomeDir /data1/caoronglin/data/human \\ --readFilesIn /data1/caoronglin/data/human/data/GM12878/results/trimmed/ENCFF974EKR_trimmed.fq.gz \\ --outFileNamePrefix /data1/caoronglin/data/human/output/ENCFF974EKR_ \\ --outSAMtype BAM SortedByCoordinate \\ --outFilterType BySJout \\ --outFilterMultimapNmax 20 \\ --alignSJoverhangMin 8 \\ --alignSJDBoverhangMin 1 \\ --outSAMattrRGline ID:GM12878 SM:GM12878 LB:library1 PU:unit1 PL:ILLUMINA \\ --outSAMmapqUnique 60 \\ --limitBAMsortRAM 20000000000 \\ --readFilesCommand zcat \\ --outReadsUnmapped Fastx \\ --quantMode GeneCounts \\ --sjdbOverhang 99 \\ （3） 比对结果ENCFF974EKR_Log.final.out.txt ENCFF824LLV_Log.final.out.txt","tags":[null],"categories":[null]}]